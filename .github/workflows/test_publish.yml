
name: Test mef_tools

on: [push, pull_request]

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
            - os: ubuntu-latest
              python-version: '3.6'
            - os: ubuntu-latest
              python-version: '3.7'
            - os: ubuntu-latest
              python-version: '3.8'
            - os: ubuntu-latest
              python-version: '3.9'
            - os: ubuntu-latest
              python-version: '3.10'

            - os: macos-latest
              python-version: '3.6'
            - os: macos-latest
              python-version: '3.7'
            - os: macos-latest
              python-version: '3.8'
            - os: macos-latest
              python-version: '3.9'
            - os: macos-latest
              python-version: '3.10'

            - os: windows-latest
              python-version: '3.6'
            - os: windows-latest
              python-version: '3.7'
            - os: windows-latest
              python-version: '3.8'
            - os: windows-latest
              python-version: '3.9'
            - os: windows-latest
              python-version: '3.10'

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Checkout submodules
      shell: bash
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools
        pip install numpy
    - name: Test package
      run:
        python3 setup.py bdist_wheel sdist || python setup.py bdist_wheel sdist
        pip3 install .
        python3 -m unittest || python -m unittest

  release:
    if: contains(github.ref, 'refs/tags/')
    needs: test

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
            - os: ubuntu-latest
              python-version: '3.6'
              docker_python_version: 'cp36-cp36m'
            - os: ubuntu-latest
              python-version: '3.7'
              docker_python_version: 'cp37-cp37m'
            - os: ubuntu-latest
              python-version: '3.8'
              docker_python_version: 'cp38-cp38'
            - os: ubuntu-latest
              python-version: '3.9'
              docker_python_version: 'cp39-cp39'
            - os: ubuntu-latest
              python-version: '3.10'
              docker_python_version: 'cp310-cp310'

            - os: macos-latest
              python-version: '3.6'
            - os: macos-latest
              python-version: '3.7'
            - os: macos-latest
              python-version: '3.8'
            - os: macos-latest
              python-version: '3.9'
            - os: macos-latest
              python-version: '3.10'

            - os: windows-latest
              python-version: '3.6'
            - os: windows-latest
              python-version: '3.7'
            - os: windows-latest
              python-version: '3.8'
            - os: windows-latest
              python-version: '3.9'
            - os: windows-latest
              python-version: '3.10'

    steps:

    - uses: actions/checkout@v2

    - name: Checkout submodules
      shell: bash
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

    - name: Build wheels (Manylinux)
      if: startsWith(matrix.os, 'ubuntu')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TEST_API_TOKEN }}
      uses: RalfG/python-wheels-manylinux-build@v0.3.4-manylinux2010_x86_64
      with:
        python-versions: ${{ matrix.docker_python_version }}
        build-requirements: 'numpy'
        pip-wheel-args: '-w ./dist'

    # Set up python after manylinux build otherwise it interferes with auditwheel in the image
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools
        pip install twine
    - name: Build wheels (Windows and MacOS)
      if: startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'windows')
      run: |
        pip install wheel
        python setup.py sdist bdist_wheel

#    - name: Publish package (Windows and MacOS)
#      if: startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'windows')
#      env:
#        TWINE_USERNAME: __token__
#        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
#      run: |
#        twine upload --skip-existing dist/pymef*
#    - name: Publish package (Linux)
#      if: startsWith(matrix.os, 'ubuntu')
#      env:
#        TWINE_USERNAME: __token__
#        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
#      run: |
#        twine upload --skip-existing dist/pymef*manylinux*
